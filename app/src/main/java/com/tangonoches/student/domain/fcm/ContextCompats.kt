@file:JvmName("ContextCompats")
@file:Suppress("unused", "SpellCheckingInspection")

package com.tangonoches.student.domain.fcm

import android.content.Context
import android.content.res.ColorStateList
import android.graphics.Typeface
import android.graphics.drawable.Drawable
import androidx.annotation.ColorInt
import androidx.annotation.ColorRes
import androidx.annotation.DrawableRes
import androidx.annotation.FontRes
import androidx.core.content.ContextCompat
import androidx.core.content.res.ResourcesCompat

/**
 * Returns a drawable object associated with a particular resource ID.
 * Starting in [Build.VERSION_CODES.LOLLIPOP][android.os.Build.VERSION_CODES.LOLLIPOP], the
 * returned drawable will be styled for the specified Context's theme.
 *
 * @param id The desired resource identifier, as generated by the aapt tool.
 *           This integer encodes the package, type, and resource entry.
 *           The value 0 is an invalid identifier.
 *
 * @return An [Drawable] object that can be used to draw this resource.
 *
 * @see ContextCompat.getDrawable
 */
fun Context.getDrawableCompat(@DrawableRes id: Int): Drawable? {
    return if (id != 0) ContextCompat.getDrawable(this, id) else null
}

/**
 * Returns a color associated with a particular resource ID
 * Starting in [Build.VERSION_CODES.M][android.os.Build.VERSION_CODES.M], the returned
 * color will be styled for the specified Context's theme.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @return A single color value in the form 0xAARRGGBB.
 *
 * @throws android.content.res.Resources.NotFoundException if the given ID does not exist.
 *
 * @see ContextCompat.getColor
 */
@ColorInt
fun Context.getColorCompat(@ColorRes id: Int): Int {
    return ContextCompat.getColor(this, id)
}

/**
 * Returns a color state list associated with a particular resource ID.
 * Starting in [Build.VERSION_CODES.M][android.os.Build.VERSION_CODES.M], the returned
 * color state list will be styled for the specified Context's theme.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @return A [ColorStateList], or null if the resource could not be resolved.
 *
 * @throws android.content.res.Resources.NotFoundException if the given ID does not exist.
 *
 * @see ContextCompat.getColorStateList
 */
fun Context.getColorStateListCompat(@ColorRes id: Int): ColorStateList? {
    return ContextCompat.getColorStateList(this, id)
}

/**
 * Return the handle to a system-level service by class.
 *
 * @receiver Context to retrieve service from.
 * @param T The class of the desired service.
 * @return The service or null if the class is not a supported system service.
 *
 * @see ContextCompat.getSystemService
 */
inline fun <reified T : Any> Context.getSystemServiceCompat(): T? {
    return ContextCompat.getSystemService(this, T::class.java)
}

/**
 * Gets the name of the system-level service that is represented by the specified class.
 *
 * @receiver Context to retrieve service name from.
 * @param T The class of the desired service.
 * @return The service name or null if the class is not a supported system service.
 *
 * @see ContextCompat.getSystemServiceName
 */
inline fun <reified T : Any> Context.getSystemServiceNameCompat(): String? {
    return ContextCompat.getSystemServiceName(this, T::class.java)
}

/**
 * Returns a font Typeface associated with a particular resource ID.
 * <p>
 * This method will block the calling thread to retrieve the requested font, including if it
 * is from a font provider. If you wish to not have this behavior, use
 * {@link #getFont(Context, int, FontCallback, Handler)} instead.
 * <p>
 * Prior to API level 23, font resources with more than one font in a family will only load the
 * font closest to a regular weight typeface.
 *
 * @param id The desired resource identifier of a {@link Typeface},
 *           as generated by the aapt tool. This integer encodes the
 *           package, type, and resource entry. The value 0 is an invalid
 *           identifier.
 * @return A font Typeface object.
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @see #getFont(Context, int, FontCallback, Handler)
 */
fun Context.getFontCompat(@FontRes id: Int): Typeface? {
    return ResourcesCompat.getFont(this, id)
}
